Index: src/arcacia/game/handler/PlayerHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package arcacia.game.handler;\r\n\r\nimport arcacia.game.objects.PlayerObject;\r\n\r\npublic class PlayerHandler extends PlayerObject{\r\n    private static boolean hasKey = false;\r\n    private static int lives = 3;\r\n    private static int score = 0;\r\n    private static int multiplier = ConstantHandler.scoreDefaultMultiplier;\r\n    private static PlayerObject player;\r\n\r\n\r\n    public static void incrementLives() {\r\n        lives++;\r\n    }\r\n    public static void decrementLives() {\r\n        lives--;\r\n    }\r\n\r\n    public static void addToScore(int x)\r\n    {\r\n        score += x * multiplier;\r\n    }\r\n\r\n    //region Getter/Setter\r\n    public static boolean hasKey() {\r\n        return hasKey;\r\n    }\r\n\r\n    public static void setHasKey(boolean hasKey) {\r\n        PlayerHandler.hasKey = hasKey;\r\n    }\r\n    public static int getLives() {\r\n        return lives;\r\n    }\r\n    public static void setLives(int lives) {\r\n        PlayerHandler.lives = lives;\r\n    }\r\n    public static int getScore() {\r\n        return score;\r\n    }\r\n    public static void setScore(int score) {\r\n        PlayerHandler.score = score;\r\n    }\r\n    public static PlayerObject getPlayer() {\r\n        return player;\r\n    }\r\n    public static void setPlayer(PlayerObject player) {\r\n        PlayerHandler.player = player;\r\n    }\r\n    public static int getMultiplier() {\r\n        return multiplier;\r\n    }\r\n    public static void setMultiplier(int multiplier) {\r\n        PlayerHandler.multiplier = multiplier;\r\n    }\r\n    //endregion\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/arcacia/game/handler/PlayerHandler.java b/src/arcacia/game/handler/PlayerHandler.java
--- a/src/arcacia/game/handler/PlayerHandler.java	(revision f3cb0a1ce10d642ee24fdbc3e2e2771ce5ea3496)
+++ b/src/arcacia/game/handler/PlayerHandler.java	(date 1639702760138)
@@ -6,7 +6,7 @@
     private static boolean hasKey = false;
     private static int lives = 3;
     private static int score = 0;
-    private static int multiplier = ConstantHandler.scoreDefaultMultiplier;
+    private static int multiplier = 1;
     private static PlayerObject player;
 
 
@@ -17,12 +17,17 @@
         lives--;
     }
 
-    public static void addToScore(int x)
-    {
-        score += x * multiplier;
+    public int addScore(int score) {
+        PlayerHandler.score += /*ItemHandler.getMultiplier() * */ score;
+        return PlayerHandler.score;
     }
+
 
     //region Getter/Setter
+    public static void setSpeed(int speed){PlayerObject.speed = speed;}
+    
+    public static int getSpeed(){return speed;};
+
     public static boolean hasKey() {
         return hasKey;
     }
@@ -30,27 +35,40 @@
     public static void setHasKey(boolean hasKey) {
         PlayerHandler.hasKey = hasKey;
     }
+
     public static int getLives() {
         return lives;
     }
+
     public static void setLives(int lives) {
         PlayerHandler.lives = lives;
     }
+
     public static int getScore() {
         return score;
     }
+
     public static void setScore(int score) {
         PlayerHandler.score = score;
     }
+
+    public static void addToScore(int score)
+    {
+        setScore(getScore() + score * multiplier);
+    }
+
     public static PlayerObject getPlayer() {
         return player;
     }
+
     public static void setPlayer(PlayerObject player) {
         PlayerHandler.player = player;
     }
+
     public static int getMultiplier() {
         return multiplier;
     }
+
     public static void setMultiplier(int multiplier) {
         PlayerHandler.multiplier = multiplier;
     }
Index: src/arcacia/game/handler/GameHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package arcacia.game.handler;\r\n\r\npublic class GameHandler {\r\n\r\n    private static boolean running = false;\r\n    private static int playerTimeout = 0;\r\n    private static int playerTurn = 1;\r\n    private static int enemyTimeout = 0;\r\n    private static int enemyTurn = 1;\r\n\r\n    public void loop() throws InterruptedException {\r\n        Thread.sleep(1000);\r\n\r\n        for (int i = 0; i < playerTurn; i++) {\r\n            if(playerTimeout > 0) {\r\n                playerTimeout--;\r\n            } else {\r\n                //Player Moves\r\n            }\r\n        }\r\n\r\n        Thread.sleep(100);\r\n        for (int i = 0; i < enemyTurn; i++) {\r\n            if(enemyTimeout > 0) {\r\n                enemyTimeout--;\r\n            } else {\r\n                //Enemy Moves\r\n            }\r\n        }\r\n        ItemHandler.tick();\r\n    }\r\n\r\n    //region Getter/Setter\r\n    public static void setEnemyTimeout(int enemyTimeout){\r\n        GameHandler.enemyTimeout = enemyTimeout;\r\n    }\r\n    public static int getEnemyTimeout(){\r\n        return enemyTimeout;\r\n    }\r\n\r\n    public static void setPlayerTimeout(int playerTimeout){\r\n        GameHandler.playerTimeout = playerTimeout;\r\n    }\r\n    public static int getPlayerTimeout(){\r\n        return playerTimeout;\r\n    }\r\n\r\n    public static void setPlayerTurn(int playerTurn){\r\n        GameHandler.playerTurn = playerTurn;\r\n    }\r\n    public static int getPlayerTurn(){\r\n        return playerTurn;\r\n    }\r\n\r\n    public static int getEnemyTurn() {\r\n        return enemyTurn;\r\n    }\r\n    public static void setEnemyTurn(int enemyTurn) {\r\n        GameHandler.enemyTurn = enemyTurn;\r\n    }\r\n\r\n    public static void setRunning(boolean running) {\r\n        GameHandler.running = running;\r\n    }\r\n    public static boolean isRunning() { return running; }\r\n    //endregion\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/arcacia/game/handler/GameHandler.java b/src/arcacia/game/handler/GameHandler.java
--- a/src/arcacia/game/handler/GameHandler.java	(revision f3cb0a1ce10d642ee24fdbc3e2e2771ce5ea3496)
+++ b/src/arcacia/game/handler/GameHandler.java	(date 1639702769198)
@@ -1,69 +1,87 @@
 package arcacia.game.handler;
 
+import arcacia.game.objects.GameObject;
+import arcacia.game.objects.PlayerObject;
+import arcacia.game.objects.enemy.Enemy;
+import arcacia.game.util.Location;
+
 public class GameHandler {
 
-    private static boolean running = false;
-    private static int playerTimeout = 0;
-    private static int playerTurn = 1;
-    private static int enemyTimeout = 0;
-    private static int enemyTurn = 1;
+    public static boolean isRunning;
+    public static int playerTimeout = 0;
+    public static volatile int playerTurn = 1;
+    public static int enemyTimeout = 0;
 
-    public void loop() throws InterruptedException {
-        Thread.sleep(1000);
 
-        for (int i = 0; i < playerTurn; i++) {
-            if(playerTimeout > 0) {
-                playerTimeout--;
-            } else {
-                //Player Moves
-            }
-        }
+    //Setter/Getter
 
-        Thread.sleep(100);
-        for (int i = 0; i < enemyTurn; i++) {
-            if(enemyTimeout > 0) {
-                enemyTimeout--;
-            } else {
-                //Enemy Moves
-            }
-        }
-        ItemHandler.tick();
-    }
-
-    //region Getter/Setter
-    public static void setEnemyTimeout(int enemyTimeout){
+    public void setEnemyTimeout(int enemyTimeout){
         GameHandler.enemyTimeout = enemyTimeout;
     }
     public static int getEnemyTimeout(){
         return enemyTimeout;
     }
 
-    public static void setPlayerTimeout(int playerTimeout){
+    public void setPlayerTimeout(int playerTimeout){
         GameHandler.playerTimeout = playerTimeout;
     }
+
     public static int getPlayerTimeout(){
         return playerTimeout;
     }
 
-    public static void setPlayerTurn(int playerTurn){
+    public void setPlayerTurn(int playerTurn){
         GameHandler.playerTurn = playerTurn;
+
     }
+
     public static int getPlayerTurn(){
         return playerTurn;
     }
 
-    public static int getEnemyTurn() {
-        return enemyTurn;
-    }
-    public static void setEnemyTurn(int enemyTurn) {
-        GameHandler.enemyTurn = enemyTurn;
-    }
+
+    public void Gameloop() throws InterruptedException {
+
+
+        while (playerTurn != 0 && isRunning) {
+
+
+            playerTurn++;
+            /*
+                Delay, nach Turn eines Spielers
+             */
+            Thread.sleep(2000); //
+
+            if(enemyTimeout == 0){
+
+                /*
+                    Gegnern Begewen sich
+                 */
+                enemyTimeout++;
+
+                //
+            }
+            else{
+
+                /*
+                    Gegner wird pausiert und dekrementiert
+                 */
+                //Gegner hier wird pausiert( sp√§ter)
+
+                enemyTimeout--;
+                Enemy.setStopwatchOn(true);
+                Thread.sleep(2000);
+
+            }
+            Enemy.setStopwatchOn(false);
+           // isRunning = true;
+            Thread.sleep(2000);
 
-    public static void setRunning(boolean running) {
-        GameHandler.running = running;
+        }
+
     }
-    public static boolean isRunning() { return running; }
-    //endregion
+
+
 }
 
 
Index: src/arcacia/game/handler/CollisionHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package arcacia.game.handler;\r\n\r\nimport arcacia.game.objects.GameObject;\r\nimport arcacia.game.objects.PlayerObject;\r\nimport arcacia.game.objects.enemy.Enemy;\r\nimport arcacia.game.objects.item.Coin;\r\nimport arcacia.game.objects.item.Item;\r\nimport arcacia.game.objects.tile.DoorObject;\r\nimport arcacia.game.objects.tile.WallTile;\r\n\r\npublic class CollisionHandler {\r\n\r\n    public static GameObject collision(GameObject initiator, GameObject collider) {\r\n        if (collider == null) return null;\r\n\r\n        if(initiator instanceof PlayerObject) {\r\n            return playerCollision((PlayerObject) initiator, collider);\r\n        }\r\n        else if (initiator instanceof Enemy) {\r\n            return enemyCollision((Enemy) initiator, collider);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private static GameObject playerCollision(PlayerObject player, GameObject collider) {\r\n        if (collider instanceof Coin coin){\r\n            coin.collect();\r\n            return null;\r\n        }\r\n        else if (collider instanceof Item item) {\r\n            item.collect();\r\n            return null;\r\n        }\r\n        else if (collider instanceof Enemy enemy) {\r\n            if(ItemHandler.isPowerPillActive()) {\r\n                enemy.reset();\r\n                PlayerHandler.addToScore(ConstantHandler.scoreEnemyKill);\r\n            } else {\r\n                PlayerHandler.decrementLives();\r\n                //Restart Game\r\n            }\r\n            return null;\r\n        }\r\n        else if (collider instanceof DoorObject) {\r\n            if(PlayerHandler.hasKey()) {\r\n                //Lade n√§chstes Level\r\n            }\r\n            return null;\r\n        }\r\n        else if (collider instanceof WallTile) {\r\n            System.out.println(\"Kritischer Fehler\");\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private static GameObject enemyCollision(Enemy enemy, GameObject collider) {\r\n        if (collider instanceof PlayerObject) {\r\n            if(ItemHandler.isPowerPillActive()) {\r\n                enemy.reset();\r\n                PlayerHandler.addToScore(ConstantHandler.scoreEnemyKill);\r\n            } else {\r\n                PlayerHandler.decrementLives();\r\n                //Restart Game\r\n            }\r\n            return null;\r\n\r\n        }\r\n        else if (collider instanceof WallTile) {\r\n            System.out.println(\"Kritischer Fehler\");\r\n        }\r\n        return collider;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/arcacia/game/handler/CollisionHandler.java b/src/arcacia/game/handler/CollisionHandler.java
--- a/src/arcacia/game/handler/CollisionHandler.java	(revision f3cb0a1ce10d642ee24fdbc3e2e2771ce5ea3496)
+++ b/src/arcacia/game/handler/CollisionHandler.java	(date 1639702756970)
@@ -3,10 +3,8 @@
 import arcacia.game.objects.GameObject;
 import arcacia.game.objects.PlayerObject;
 import arcacia.game.objects.enemy.Enemy;
-import arcacia.game.objects.item.Coin;
 import arcacia.game.objects.item.Item;
 import arcacia.game.objects.tile.DoorObject;
-import arcacia.game.objects.tile.WallTile;
 
 public class CollisionHandler {
 
@@ -18,57 +16,34 @@
         }
         else if (initiator instanceof Enemy) {
             return enemyCollision((Enemy) initiator, collider);
+        }else if(initiator instanceof DoorObject){
+            return doorCollision((DoorObject) initiator,collider);
         }
 
         return null;
     }
 
     private static GameObject playerCollision(PlayerObject player, GameObject collider) {
-        if (collider instanceof Coin coin){
-            coin.collect();
-            return null;
-        }
-        else if (collider instanceof Item item) {
-            item.collect();
-            return null;
-        }
-        else if (collider instanceof Enemy enemy) {
-            if(ItemHandler.isPowerPillActive()) {
-                enemy.reset();
-                PlayerHandler.addToScore(ConstantHandler.scoreEnemyKill);
-            } else {
-                PlayerHandler.decrementLives();
-                //Restart Game
-            }
-            return null;
-        }
-        else if (collider instanceof DoorObject) {
-            if(PlayerHandler.hasKey()) {
-                //Lade n√§chstes Level
-            }
-            return null;
-        }
-        else if (collider instanceof WallTile) {
-            System.out.println("Kritischer Fehler");
+        //if (collider instanceof Coin){}
+        /*else*/ if (collider instanceof Enemy enemy) {
+            //if(ItemHandler.hasPowerPill()) { enemy.kill(); PlayerHandler.addScore(ConstantHandler.scoreEnemyKill); return null;
+            PlayerHandler.decrementLives();
+            //reset Level etc.
         }
 
-        return null;
+        return collider;
     }
 
     private static GameObject enemyCollision(Enemy enemy, GameObject collider) {
         if (collider instanceof PlayerObject) {
-            if(ItemHandler.isPowerPillActive()) {
-                enemy.reset();
-                PlayerHandler.addToScore(ConstantHandler.scoreEnemyKill);
-            } else {
-                PlayerHandler.decrementLives();
-                //Restart Game
-            }
-            return null;
+            PlayerHandler.decrementLives();
+        } return collider;
+    }
 
-        }
-        else if (collider instanceof WallTile) {
-            System.out.println("Kritischer Fehler");
+    private static GameObject doorCollision(DoorObject door, GameObject collider){
+        //Wenn Kollision mit Player und Player hat Key eingesammelt. sonst passiert nichts
+        if(collider instanceof PlayerObject && PlayerHandler.hasKey()  ){
+            /*Load next Level */
         }
         return collider;
     }
Index: src/arcacia/Editor/Editor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/arcacia/Editor/Editor.java b/src/arcacia/Editor/Editor.java
new file mode 100644
--- /dev/null	(date 1639703066670)
+++ b/src/arcacia/Editor/Editor.java	(date 1639703066670)
@@ -0,0 +1,9 @@
+package arcacia.Editor;
+
+public class Editor {
+
+    /**TODO: .txt einlesen
+     * TODO: .txt in ein Array speichern
+     * TODO: Eingelesenes Array nach Symbolen um interpretieren in ein Level entsprechend der symbole des Arrays also einlese Array -> Levle Grid
+     */
+}
