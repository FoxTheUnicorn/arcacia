Index: src/arcacia/Arcacia.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package arcacia;\r\n\r\nimport arcacia.game.handler.FileHandler;\r\nimport arcacia.game.handler.LevelHandler;\r\nimport arcacia.game.objects.PlayerObject;\r\nimport arcacia.game.objects.item.CoinItem;\r\nimport arcacia.game.objects.item.ExtraLife;\r\nimport arcacia.game.objects.tile.DoorObject;\r\nimport arcacia.game.scene.SceneHandler;\r\n\r\npublic class Arcacia {\r\n    public static void main(String[] args) {\r\n\r\n      //  LevelHandler.debugInitGrid(ExtraLife.class);\r\n        SceneHandler.initialise();\r\n        SceneHandler.showMainMenu();\r\n        FileHandler.loadLevelX(4);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/arcacia/Arcacia.java b/src/arcacia/Arcacia.java
--- a/src/arcacia/Arcacia.java	(revision e889f7621776cbfdf5a161c6763c66b1f93be3f1)
+++ b/src/arcacia/Arcacia.java	(date 1640095177350)
@@ -14,6 +14,6 @@
       //  LevelHandler.debugInitGrid(ExtraLife.class);
         SceneHandler.initialise();
         SceneHandler.showMainMenu();
-        FileHandler.loadLevelX(4);
+        FileHandler.loadLevelX(1);
     }
 }
Index: src/arcacia/game/handler/FileHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package arcacia.game.handler;\r\n\r\nimport arcacia.game.objects.GameObject;\r\nimport arcacia.game.objects.PlayerObject;\r\nimport arcacia.game.objects.enemy.Enemy;\r\nimport arcacia.game.objects.item.*;\r\nimport arcacia.game.objects.tile.DoorObject;\r\nimport arcacia.game.objects.tile.EmptyTile;\r\nimport arcacia.game.objects.tile.WallTile;\r\nimport arcacia.game.util.Location;\r\n\r\nimport java.io.*;\r\n\r\npublic class FileHandler {\r\n\r\n    //Geometry\r\n    public static final char wall = 'W';\r\n    public static final char door = 'D';\r\n    public static final char player = 'P';\r\n    public static final char key = 'K';\r\n    public static final char enemy = 'X';//speziell Gegner der auf EmptyTile steht\r\n    public static final char coin = '.';\r\n    public static final char empty = 'L';\r\n    //Items\r\n    public static final char speed = 'S';\r\n    public static final char healtUp = 'H';\r\n    public static final char stopwatch = 'Y';\r\n    public static final char power = 'O';\r\n    public static final char multiplikator = 'C';\r\n\r\n    //Gegner der auf Item Steht\r\n    public static final char Ekey = '1';\r\n    public static final char Ecoin = '2';\r\n    public static final char Espeed = '3';\r\n    public static final char EhealtUp = '4';\r\n    public static final char Estopwatch = '5';\r\n    public static final char Epower = '6';\r\n    public static final char Emultiplikator = '7';\r\n\r\n    private static final String filePath = \"./Level-editor/Level/\";\r\n\r\n    public static final int WithGrid = 24;\r\n    public static final int HeightGrid = 15;\r\n\r\n    /**\r\n     * Nimmt für die Spielfeldgröße die werte in WithGrid und HeightGrid in dieser Klasse\r\n     * öffnet die unter filePath liegende Datei,\r\n     * schreibt den Aktuellen zustand des Level Grids in dei Datei\r\n     * und schreibt darunter die Daten aus den Variablen des PlayerHandlers, ItemHandlers und GameHandlers.\r\n     *\r\n     * @throws FileNotFoundException schmeißt eine FileNotFound Exception, wenn zu öffnende Datei nicht geöffnet werden konnte\r\n     */\r\n    public static void saveGame() throws FileNotFoundException {\r\n        PrintWriter pWriter = new PrintWriter(new FileOutputStream(filePath));\r\n        StringBuilder line = new StringBuilder();\r\n        //schreibt den Aktuellen zustand des Spielfelds in die Datei\r\n        for (int y = 0; y < HeightGrid; y++) {\r\n            for (int x = 0; x < WithGrid; x++) {\r\n                GameObject temp = LevelHandler.getObjectAt(new Location(x, y));\r\n                if (temp instanceof WallTile) {\r\n                    line.append(wall);\r\n                } else if (temp instanceof EmptyTile) {\r\n                    line.append(empty);\r\n                } else if (temp instanceof DoorObject) {\r\n                    line.append(door);\r\n                } else if (temp instanceof PlayerObject) {\r\n                    line.append(player);\r\n\r\n                } else if (temp instanceof Enemy) {// hier ist bestimmt das auf der postiton ein gegner steht nun wird bestimmt ob der gegner auf einem Item steht und auf welchem\r\n\r\n                    if (((Enemy) temp).getObjectOnPosition() instanceof EmptyTile) {\r\n                        line.append(enemy);\r\n                    } else if (((Enemy) temp).getObjectOnPosition() instanceof CoinItem) {\r\n                        line.append(Ecoin);\r\n                    } else if (((Enemy) temp).getObjectOnPosition() instanceof ExtraLife) {\r\n                        line.append(EhealtUp);\r\n                    } else if (((Enemy) temp).getObjectOnPosition() instanceof Key) {\r\n                        line.append(Ekey);\r\n                    } else if (((Enemy) temp).getObjectOnPosition() instanceof Multiplier) {\r\n                        line.append(Emultiplikator);\r\n                    } else if (((Enemy) temp).getObjectOnPosition() instanceof PowerPill) {\r\n                        line.append(Epower);\r\n                    } else if (((Enemy) temp).getObjectOnPosition() instanceof SpeedBoots) {\r\n                        line.append(Espeed);\r\n                    } else if (((Enemy) temp).getObjectOnPosition() instanceof Stopwatch) {\r\n                        line.append(Estopwatch);\r\n                    }\r\n                } else if (temp instanceof Item) { //hier wurde bestimmt das ein Item auf der Position Liegt, nun wird bestimmt welches\r\n                    if (temp instanceof CoinItem) {\r\n                        line.append(coin);\r\n                    } else if (temp instanceof ExtraLife) {\r\n                        line.append(healtUp);\r\n                    } else if (temp instanceof Key) {\r\n                        line.append(key);\r\n                    } else if (temp instanceof Multiplier) {\r\n                        line.append(multiplikator);\r\n                    } else if (temp instanceof PowerPill) {\r\n                        line.append(power);\r\n                    } else if (temp instanceof SpeedBoots) {\r\n                        line.append(speed);\r\n                    } else if (temp instanceof Stopwatch) {\r\n                        line.append(stopwatch);\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            pWriter.println(line);\r\n            line = new StringBuilder();\r\n        }\r\n        //schreibt die Restlichen zu merkenden Variablen in die Datei in einer Bestimten Reihenfolge\r\n\r\n        //PlayerHandler\r\n        pWriter.println(PlayerHandler.hasKey());\r\n        pWriter.println(PlayerHandler.getLives());\r\n        pWriter.println(PlayerHandler.getScore());\r\n        //ItemHandler\r\n        pWriter.println(ItemHandler.getPowerPillDuration());\r\n        pWriter.println(ItemHandler.getMultiplierDuration());\r\n        pWriter.println(ItemHandler.getSpeedBootsDuration());\r\n        //GameHandler\r\n        pWriter.println(GameHandler.getEnemyTimeout());\r\n        pWriter.println(GameHandler.getPlayerTurn());\r\n\r\n        pWriter.close();\r\n    }\r\n\r\n\r\n    /**\r\n     * LevelBuilder\r\n     * lies level aus datei aus\r\n     * Baue Level Grid basierend auf datei\r\n     *\r\n     */\r\n    public static void levelBuilder(BufferedReader bReader){\r\n        GameObject[][] new_grid = new GameObject[WithGrid][HeightGrid];\r\n\r\n        String line = \"\";\r\n\r\n        for (int y = 0; y < HeightGrid; y++) {\r\n\r\n            try {\r\n                line = bReader.readLine();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n                break;\r\n            }\r\n\r\n            char now;\r\n            for (int x = 0; x < WithGrid; x++) {\r\n\r\n                now = line.charAt(x);\r\n                Location loc = new Location(x, y);\r\n\r\n                //vergleich welches objekt von dem Character dargestellt wird (19 mal)\r\n                switch (now) {\r\n                    case (wall) -> new_grid[x][y] = new WallTile(loc);\r\n                    case (empty) -> new_grid[x][y] = new EmptyTile(loc);\r\n                    case (player) -> new_grid[x][y] = new PlayerObject(loc);\r\n                    case (key) -> new_grid[x][y] = new Key(loc);\r\n                    case (coin) -> new_grid[x][y] = new CoinItem(loc);\r\n                    case (door) -> new_grid[x][y] = new DoorObject(loc);\r\n                    case (speed) -> new_grid[x][y] = new SpeedBoots(loc);\r\n                    case (healtUp) -> new_grid[x][y] = new ExtraLife(loc);\r\n                    case (stopwatch) -> new_grid[x][y] = new Stopwatch(loc);\r\n                    case (power) -> new_grid[x][y] = new PowerPill(loc);\r\n                    case (multiplikator) -> new_grid[x][y] = new Multiplier(loc);\r\n                    case (enemy) -> new_grid[x][y] = new Enemy(loc);\r\n\r\n                    case (Ecoin) -> new_grid[x][y] = new Enemy(loc, new CoinItem(loc));\r\n                    case (Ekey) -> new_grid[x][y] = new Enemy(loc, new Key(loc));\r\n                    case (Emultiplikator) -> new_grid[x][y] = new Enemy(loc, new Multiplier(loc));\r\n                    case (Epower) -> new_grid[x][y] = new Enemy(loc, new PowerPill(loc));\r\n                    case (Espeed) -> new_grid[x][y] = new Enemy(loc, new SpeedBoots(loc));\r\n                    case (EhealtUp) -> new_grid[x][y] = new Enemy(loc, new ExtraLife(loc));\r\n                    case (Estopwatch) -> new_grid[x][y] = new Enemy(loc, new Stopwatch(loc));\r\n                }\r\n            }\r\n        }\r\n        LevelHandler.setLevelGrid(new_grid);\r\n\r\n    }\r\n\r\n    /**\r\n     * loadLevelX\r\n     * läd ein spezifisches level welches Dann gebaut werden soll\r\n     */\r\n    public static boolean loadLevelX(int i)  {\r\n\r\n        try {\r\n            BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath+\"Level_\"+i+\".txt\"));\r\n            levelBuilder(bufferedReader);\r\n            bufferedReader.close();\r\n            return true;\r\n\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Nimmt für die Spielfeldgröße die werte in WithGrid und HeightGrid in dieser Klasse\r\n     * öffnet Datei die unter filePath liegt,\r\n     * liest das dort liegende Spielfeld aus und legt es in den Grid vom LevelHandler\r\n     * zusätzlich werden die Darunter stehenden Daten in die Variablen des PlayerHandlers, ItemHandlers und GameHandlers gesetzt.\r\n     *\r\n     * @throws FileNotFoundException schmeißt eine FileNotFoundException, wenn die zu öffnende Datei nicht geöffnet werden konnte\r\n     */\r\n    public static void loadGame() throws FileNotFoundException {\r\n       // GameObject[][] new_grid = new GameObject[WithGrid][HeightGrid];\r\n        BufferedReader bReader = new BufferedReader(new FileReader(filePath));\r\n        levelBuilder(bReader);\r\n\r\n\r\n//        String line = \"\";\r\n//\r\n//        for (int y = 0; y < HeightGrid; y++) {\r\n//\r\n//            try {\r\n//                line = bReader.readLine();\r\n//            } catch (IOException e) {\r\n//                e.printStackTrace();\r\n//                break;\r\n//            }\r\n//\r\n//            char now;\r\n//            for (int x = 0; x < WithGrid; x++) {\r\n//\r\n//                now = line.charAt(x);\r\n//                Location loc = new Location(x, y);\r\n//\r\n//                //vergleich welches objekt von dem Character dargestellt wird (19 mal)\r\n//                switch (now) {\r\n//                    case (wall) -> new_grid[x][y] = new WallTile(loc);\r\n//                    case (empty) -> new_grid[x][y] = new EmptyTile(loc);\r\n//                    case (player) -> new_grid[x][y] = new PlayerObject(loc);\r\n//                    case (key) -> new_grid[x][y] = new Key(loc);\r\n//                    case (coin) -> new_grid[x][y] = new CoinItem(loc);\r\n//                    case (door) -> new_grid[x][y] = new DoorObject(loc);\r\n//                    case (speed) -> new_grid[x][y] = new SpeedBoots(loc);\r\n//                    case (healtUp) -> new_grid[x][y] = new ExtraLife(loc);\r\n//                    case (stopwatch) -> new_grid[x][y] = new Stopwatch(loc);\r\n//                    case (power) -> new_grid[x][y] = new PowerPill(loc);\r\n//                    case (multiplikator) -> new_grid[x][y] = new Multiplier(loc);\r\n//                    case (enemy) -> new_grid[x][y] = new Enemy(loc);\r\n//\r\n//                    case (Ecoin) -> new_grid[x][y] = new Enemy(loc, new CoinItem(loc));\r\n//                    case (Ekey) -> new_grid[x][y] = new Enemy(loc, new Key(loc));\r\n//                    case (Emultiplikator) -> new_grid[x][y] = new Enemy(loc, new Multiplier(loc));\r\n//                    case (Epower) -> new_grid[x][y] = new Enemy(loc, new PowerPill(loc));\r\n//                    case (Espeed) -> new_grid[x][y] = new Enemy(loc, new SpeedBoots(loc));\r\n//                    case (EhealtUp) -> new_grid[x][y] = new Enemy(loc, new ExtraLife(loc));\r\n//                    case (Estopwatch) -> new_grid[x][y] = new Enemy(loc, new Stopwatch(loc));\r\n//                }\r\n//            }\r\n//        }\r\n//        LevelHandler.setLevelGrid(new_grid);\r\n\r\n        String line = \"\";\r\n        //werte rest der enthaltenen Daten aus\r\n        try {\r\n            //PlayerHandler\r\n            //hasKey\r\n            line = bReader.readLine();\r\n            PlayerHandler.setHasKey(Boolean.parseBoolean(line));\r\n            //lives\r\n            line = bReader.readLine();\r\n            PlayerHandler.setLives(Integer.parseInt(line));\r\n            //Score\r\n            line = bReader.readLine();\r\n            PlayerHandler.setScore(Integer.parseInt(line));\r\n\r\n            //ItemHandler\r\n            //powerPillDuration\r\n            line = bReader.readLine();\r\n            ItemHandler.setPowerPillDuration(Integer.parseInt(line));\r\n            //multiplierDuration\r\n            line = bReader.readLine();\r\n            ItemHandler.setMultiplierDuration(Integer.parseInt(line));\r\n            //speedBootsDuration\r\n            line = bReader.readLine();\r\n            ItemHandler.setSpeedBootsDuration(Integer.parseInt(line));\r\n\r\n            //GameHandler\r\n            //enemyTimeout\r\n            line = bReader.readLine();\r\n            GameHandler.setEnemyTimeout(Integer.parseInt(line));\r\n            //PlayerTurn\r\n            line = bReader.readLine();\r\n            GameHandler.setPlayerTurn(Integer.parseInt(line));\r\n\r\n            //schließe Datei\r\n            bReader.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * setzt das LevelGrid auf nur wände, fügt jede Art von Objekt einmal in das Grid ein auf y=5\r\n     * und setzt alle zu speichernden werte in PlayerHandler, ItemHandler und GameHandler auf bestimmte werte\r\n     * führt dan die saveGame() methode aus\r\n     */\r\n    public static void debugTestSaveGame(){\r\n        //LevelHandler.debugInitGrid();\r\n        //setze eins von jeder art objekt auf grid[n][5] starte mit n = 1\r\n        int n = 1;\r\n        //Geometry\r\n        LevelHandler.setObjectAt(new Location(n,5),new DoorObject(new Location(n,5)));n++;\r\n        LevelHandler.setObjectAt(new Location(n,5),new PlayerObject(new Location(n,5)));n++;\r\n        LevelHandler.setObjectAt(new Location(n,5),new Key(new Location(n,5)));n++;\r\n        LevelHandler.setObjectAt(new Location(n,5),new Enemy(new Location(n,5)));n++;\r\n        LevelHandler.setObjectAt(new Location(n,5),new CoinItem(new Location(n,5)));n++;\r\n        LevelHandler.setObjectAt(new Location(n,5),new EmptyTile(new Location(n,5)));n++;\r\n        //Itemsnew\r\n        LevelHandler.setObjectAt(new Location(n,5),new SpeedBoots(new Location(n,5)));n++;\r\n        LevelHandler.setObjectAt(new Location(n,5),new ExtraLife(new Location(n,5)));n++;\r\n        LevelHandler.setObjectAt(new Location(n,5),new Stopwatch(new Location(n,5)));n++;\r\n        LevelHandler.setObjectAt(new Location(n,5),new PowerPill(new Location(n,5)));n++;\r\n        LevelHandler.setObjectAt(new Location(n,5),new Multiplier(new Location(n,5)));n++;\r\n        //Gegner auf Items\r\n        LevelHandler.setObjectAt(new Location(n,5),new Enemy(new Location(n,5),new Key(new Location(n,5))));n++;\r\n        LevelHandler.setObjectAt(new Location(n,5),new Enemy(new Location(n,5),new CoinItem(new Location(n,5))));n++;\r\n        LevelHandler.setObjectAt(new Location(n,5),new Enemy(new Location(n,5),new SpeedBoots(new Location(n,5))));n++;\r\n        LevelHandler.setObjectAt(new Location(n,5),new Enemy(new Location(n,5),new ExtraLife(new Location(n,5))));n++;\r\n        LevelHandler.setObjectAt(new Location(n,5),new Enemy(new Location(n,5),new Stopwatch(new Location(n,5))));n++;\r\n        LevelHandler.setObjectAt(new Location(n,5),new Enemy(new Location(n,5),new PowerPill(new Location(n,5))));n++;\r\n        LevelHandler.setObjectAt(new Location(n,5),new Enemy(new Location(n,5),new Multiplier(new Location(n,5))));\r\n\r\n\r\n        PlayerHandler.setHasKey(true);\r\n        PlayerHandler.setLives(5);\r\n        PlayerHandler.setScore(500);\r\n\r\n        ItemHandler.setPowerPillDuration(50);\r\n        ItemHandler.setMultiplierDuration(60);\r\n        ItemHandler.setSpeedBootsDuration(70);\r\n\r\n        GameHandler.setEnemyTimeout(9);\r\n        GameHandler.setPlayerTurn(4);\r\n\r\n        try {\r\n            saveGame();\r\n        } catch (FileNotFoundException e) {\r\n            System.out.println(\"File nicht gefunden in saveGame\");\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * führt loadGame() methode aus und gibt dann ein paar der in debugTestSaveGame() gespeicherten werte aus\r\n     * diese sind die werte die von PlayerHandler, ItemHandler und GameHandler gespeichert wurde, gibt auch aus welcher werte in debugTestSaveGame reingespeichert wurden\r\n     * gibt auch einen string aus der reihe y=5 des Grids in den jeweiligen Buchstaben repräsentiert\r\n     */\r\n    public static void debugTestLoadGame(){\r\n        try {\r\n            loadGame();\r\n        } catch (FileNotFoundException e) {\r\n            System.out.println(\"File nicht gefunden in loadGame\");\r\n            e.printStackTrace();\r\n        }\r\n\r\n        System.out.println(\"hasKey: \"+ PlayerHandler.hasKey()+  \" Erwartet: true\");\r\n        System.out.println(\"lives: \"+ PlayerHandler.getLives()+  \" Erwartet: 5\");\r\n        System.out.println(\"score: \"+ PlayerHandler.getScore()+  \" Erwartet: 500\");\r\n\r\n        System.out.println(\"PowerPillDuration: \"+ ItemHandler.getPowerPillDuration()+  \" Erwartet: 50\");\r\n        System.out.println(\"MultiplierDuration: \"+ ItemHandler.getMultiplierDuration()+  \" Erwartet: 60\");\r\n        System.out.println(\"SpeedBootsDuration: \"+ ItemHandler.getSpeedBootsDuration()+  \" Erwartet: 70\");\r\n\r\n        System.out.println(\"EnemyTimeout: \"+ GameHandler.getEnemyTimeout()+  \" Erwartet: 9\");\r\n        System.out.println(\"PlayerTurn: \"+ GameHandler.getPlayerTurn() +  \" Erwartet: 4\");\r\n\r\n        //gibt Reihe mit y=5 aus inder sollten alle Objekte einmal liegen\r\n        for (int x = 0; x < WithGrid;x++){\r\n            GameObject temp = LevelHandler.getObjectAt(new Location(x, 5));\r\n            if (temp instanceof WallTile) {\r\n                System.out.print(wall);\r\n            } else if (temp instanceof EmptyTile) {\r\n                System.out.print(empty);\r\n            } else if (temp instanceof DoorObject) {\r\n                System.out.print(door);\r\n            } else if (temp instanceof PlayerObject) {\r\n                System.out.print(player);\r\n\r\n            } else if (temp instanceof Enemy) {// hier ist bestimmt das auf der postiton ein gegner steht nun wird bestimmt ob der gegner auf einem Item steht und auf welchem\r\n\r\n                if (((Enemy) temp).getObjectOnPosition() instanceof EmptyTile) {\r\n                    System.out.print(enemy);\r\n                } else if (((Enemy) temp).getObjectOnPosition() instanceof CoinItem) {\r\n                    System.out.print(Ecoin);\r\n                } else if (((Enemy) temp).getObjectOnPosition() instanceof ExtraLife) {\r\n                    System.out.print(EhealtUp);\r\n                } else if (((Enemy) temp).getObjectOnPosition() instanceof Key) {\r\n                    System.out.print(Ekey);\r\n                } else if (((Enemy) temp).getObjectOnPosition() instanceof Multiplier) {\r\n                    System.out.print(Emultiplikator);\r\n                } else if (((Enemy) temp).getObjectOnPosition() instanceof PowerPill) {\r\n                    System.out.print(Epower);\r\n                } else if (((Enemy) temp).getObjectOnPosition() instanceof SpeedBoots) {\r\n                    System.out.print(Espeed);\r\n                } else if (((Enemy) temp).getObjectOnPosition() instanceof Stopwatch) {\r\n                    System.out.print(Estopwatch);\r\n                }\r\n            } else if (temp instanceof Item) { //hier wurde bestimmt das ein Item auf der Position Liegt, nun wird bestimmt welches\r\n                if (temp instanceof CoinItem) {\r\n                    System.out.print(coin);\r\n                } else if (temp instanceof ExtraLife) {\r\n                    System.out.print(healtUp);\r\n                } else if (temp instanceof Key) {\r\n                    System.out.print(key);\r\n                } else if (temp instanceof Multiplier) {\r\n                    System.out.print(multiplikator);\r\n                } else if (temp instanceof PowerPill) {\r\n                    System.out.print(power);\r\n                } else if (temp instanceof SpeedBoots) {\r\n                    System.out.print(speed);\r\n                } else if (temp instanceof Stopwatch) {\r\n                    System.out.print(stopwatch);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/arcacia/game/handler/FileHandler.java b/src/arcacia/game/handler/FileHandler.java
--- a/src/arcacia/game/handler/FileHandler.java	(revision e889f7621776cbfdf5a161c6763c66b1f93be3f1)
+++ b/src/arcacia/game/handler/FileHandler.java	(date 1640097960073)
@@ -18,7 +18,7 @@
     public static final char door = 'D';
     public static final char player = 'P';
     public static final char key = 'K';
-    public static final char enemy = 'X';//speziell Gegner der auf EmptyTile steht
+    public static final char enemy = 'E';//speziell Gegner der auf EmptyTile steht
     public static final char coin = '.';
     public static final char empty = 'L';
     //Items
